openapi: 3.0.0
info:
  title: Jobs API
  contact: {}
  version: "1.0"
  x-codegen-settings:
    Nullify404: false
    GenerateAsyncCode: true
    UseMethodPrefix: false
    UseModelPostfix: false
    UseControllerPrefix: true
    UseEnumPostfix: true
    CollectParameters: false
    UseConstructorsForConfig: false
    UseCommonSDKLibrary: false
    iOSUseAppInfoPlist: false
    AndroidUseAppManifest: false
    BodySerialization: 0
    EnableAdditionalModelProperties: false
    PreserveParameterOrder: true
    AppendContentHeaders: true
    iOSGenerateCoreData: false
    GenerateInterfaces: false
    NodeHttpClient: NODE_REQUEST
    ValidateRequiredParameters: false
    JavaUsePropertiesConfig: false
    Timeout: 0
    StoreTimezoneInformation: false
    EnablePHPComposerVersionString: false
    EnableLogging: false
    ArraySerialization: Indexed
    ModelSerializationScheme: Json
    UseExceptionPrefix: true
    RunscopeEnabled: false
    AndroidHttpClient: ANDROID_OK
    ObjCHttpClient: UNIREST
    CSharpHttpClient: UNIREST
    PHPHttpClient: UNIREST
    JavaHttpClient: JAVA_OK
    ParameterArrayFormat: ParamArrayWithIndex
    SecurityProtocols:
      - Ssl3
      - Tls
    GenerateTravisConfig: false
    GenerateCircleConfig: false
    GenerateAppveyorConfig: false
    GenerateJenkinsConfig: false
    EnableHttpCache: false
    Retries: 0
    RetryInterval: 1
    GenerateAdvancedDocs: true
    UnderscoreNumbers: true
    UseSingletonPattern: true
    DisableLinting: false
    ApplyCustomizations: []
    SortResources: false
    AllowSkippingSSLCertVerification: false
    DoNotSplitWords: []
    EnableGlobalUserAgent: true
    ReturnCompleteHttpResponse: false
    GenerateModels: true
    GenerateExceptions: true
    IgnoreIfNullJson: false
    DisableDocs: false
    LiftParameterDescriptionFromCustomType: false
    ThrowForHttpErrorStatusCodes: true
    ResponseMapping:
      Type: Simple
    ForceKeywordArgsInRuby: false
    SymbolizeHashKeysInRuby: false
    UsageExampleEndpoint:
      Description: ""
      EndpointGroupName: ""
      EndpointName: ""
    IsLatestVersion: false
    EnableImmutableModels: false
    GenerateEnums: true
    BackoffFactor: 2
    StatusCodesToRetry:
      - 408
      - 413
      - 429
      - 500
      - 502
      - 503
      - 504
      - 521
      - 522
      - 524
    RequestMethodsToRetry:
      - GET
      - PUT
    UserConfigurableRetries: true
    UseEndpointMethodName: false
    EncodeTemplateParameters: true
    GenerateExamplesForOptionalFields: false
    MultitargetDotnetVersions: false
    BackoffMax: 0
    RetryOnTimeout: true
    EnableCookies: false
    EnableJsonPassThroughForAny: false
    PascalCaseEnumForCSharp: false
    PascalCaseEnumForTypeScript: false
    EnableExperimentalTypeCombinatorGeneration: false
    ErrorTemplates: {}
  x-server-configuration:
    default-environment: production
    default-server: Server 1
    environments:
      - name: production
        servers:
          - name: Server 1
            url: https://jobs-api-yuliahar.onrender.com
    parameters: []
  x-image-uri: ""
servers:
  - url: https://jobs-api-yuliahar.onrender.com
    variables: {}
paths:
  /api/v1/auth/register:
    post:
      tags:
        - Auth
      summary: Register
      operationId: Register
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RegisterRequest"
                - example:
                    name: "{{$randomFullName}}"
                    email: "{{$randomEmail}}"
                    password: Secret!123
            example:
              name: "{{$randomFullName}}"
              email: "{{$randomEmail}}"
              password: Secret!123
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: POST
            uri: /api/v1/auth/register
            headers:
              Content-Type: application/json
            body: >-
              {

                "name": "{{$randomFullName}}",

                "email": "{{$randomEmail}}",

                "password": "Secret!123"

              }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: false
          x-testName: Register
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      summary: Login User
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LoginUserRequest"
                - example:
                    email: Erica.McClure49@yahoo.com
                    password: Secret!123
            example:
              email: Erica.McClure49@yahoo.com
              password: Secret!123
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: POST
            uri: /api/v1/auth/login
            headers:
              Content-Type: application/json
            body: >-
              {

                "email": "Erica.McClure49@yahoo.com",

                "password": "Secret!123"

              }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: false
          x-testName: Login User
  /api/v1/jobs:
    get:
      tags:
        - Jobs
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: GET
            uri: /api/v1/jobs
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get All Jobs
    post:
      tags:
        - Jobs
      summary: Create Job
      operationId: CreateJob
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateJobRequest"
                - example:
                    company: "{{$randomCompanyName}}"
                    position: QA Engineer
                    status: interview
            example:
              company: "{{$randomCompanyName}}"
              position: QA Engineer
              status: interview
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: POST
            uri: /api/v1/jobs
            headers:
              Content-Type: application/json
            body: >-
              {

                "company": "{{$randomCompanyName}}",

                "position": "QA Engineer",

                "status": "interview"

              }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Create Job
  /api/v1/jobs/65766aa5882b4fb03038de8e:
    get:
      tags:
        - Jobs
      summary: Get Job
      operationId: GetJob
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: GET
            uri: /api/v1/jobs/65766aa5882b4fb03038de8e
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get Job
    patch:
      tags:
        - Jobs
      summary: Update Job
      operationId: UpdateJob
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateJobRequest"
                - example:
                    company: Meta Inc.
            example:
              company: Meta Inc.
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: PATCH
            uri: /api/v1/jobs/65766aa5882b4fb03038de8e
            headers:
              Content-Type: application/json
            body: >-
              {

                "company": "Meta Inc."

              }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Update Job
    delete:
      tags:
        - Jobs
      summary: Delete Job
      operationId: DeleteJob
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: DELETE
            uri: /api/v1/jobs/65766aa5882b4fb03038de8e
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Delete Job
  /:
    get:
      tags:
        - Misc
      summary: Health Check
      operationId: HealthCheck
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        ErrorTemplates: {}
        SkipAdditionalHeaders: false
      x-unitTests:
        - request:
            method: GET
            uri: /
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            statusCode: "200"
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Health Check
components:
  schemas:
    RegisterRequest:
      title: RegisterRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: "{{$randomFullName}}"
        email: "{{$randomEmail}}"
        password: Secret!123
    LoginUserRequest:
      title: LoginUserRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: Erica.McClure49@yahoo.com
        password: Secret!123
    RegisterduplicateemailRequest:
      title: RegisterduplicateemailRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: "{{$randomFullName}}"
        email: Erica.McClure49@yahoo.com
        password: Secret!123
    RegisterwithmissingpasswordRequest:
      title: RegisterwithmissingpasswordRequest
      required:
        - name
        - email
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      example:
        name: "{{$randomFullName}}"
        email: Erica.McClure49@yahoo.com
    RegisterwithmissingpasswordandemailRequest:
      title: RegisterwithmissingpasswordandemailRequest
      required:
        - name
      type: object
      properties:
        name:
          type: string
      example:
        name: "{{$randomFullName}}"
    CreateJobRequest:
      title: CreateJobRequest
      required:
        - company
        - position
        - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: "{{$randomCompanyName}}"
        position: QA Engineer
        status: interview
    UpdateJobRequest:
      title: UpdateJobRequest
      required:
        - company
      type: object
      properties:
        company:
          type: string
      example:
        company: Meta Inc.
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Auth
  - name: Jobs
  - name: Misc
    description: ""
